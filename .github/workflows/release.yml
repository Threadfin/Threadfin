name: Threadfin Build
on:
  push:
    tags: "1.*"
permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Create dist directory
        run: mkdir -p dist

      - name: Build Binaries
        run: |
          go mod tidy && go mod vendor
          
          # Build all binaries in parallel
          echo "Building all platforms in parallel"
          
          # Linux builds
          env GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o dist/Threadfin_linux_arm64 &
          env GOOS=linux GOARCH=arm go build -ldflags="-s -w" -o dist/Threadfin_linux_arm &
          env GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o dist/Threadfin_linux_amd64 &
          
          # FreeBSD builds
          env GOOS=freebsd GOARCH=amd64 go build -ldflags="-s -w" -o dist/Threadfin_freebsd_amd64 &
          env GOOS=freebsd GOARCH=arm go build -ldflags="-s -w" -o dist/Threadfin_freebsd_arm &
          
          # macOS builds
          env GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o dist/Threadfin_darwin_arm64 &
          env GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o dist/Threadfin_darwin_amd64 &
          
          # Windows build
          env GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o dist/Threadfin_windows_amd64.exe &
          
          # Wait for all background jobs to finish
          wait
          
          # List all built binaries
          ls -la dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: threadfin-binaries
          path: dist/
          retention-days: 1

  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64,linux/arm/v7

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker Build and Push (Standard)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          tags: classifed200/threadfin:latest,classifed200/threadfin:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Docker Build and Push (NVIDIA)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          build-args: |
            USE_NVIDIA=1
          push: true
          platforms: linux/amd64,linux/arm64
          tags: classifed200/threadfin:latest-nvidia,classifed200/threadfin:${{ github.ref_name }}-nvidia
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: threadfin-binaries
          path: dist

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          generate_release_notes: true
